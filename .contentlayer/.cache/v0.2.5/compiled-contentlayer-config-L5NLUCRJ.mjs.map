{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts"],
  "sourcesContent": ["import {\r\n  defineDocumentType,\r\n  makeSource,\r\n  RawDocumentData\r\n} from \"contentlayer/source-files\";\r\nimport remarkGfm from \"remark-gfm\";\r\nimport rehypeSlug from \"rehype-slug\";\r\nimport rehypeAutolinkHeadings from \"rehype-autolink-headings\";\r\nimport rehypeImgSize from \"rehype-img-size\";\r\nimport { rehypeAccessibleEmojis } from \"rehype-accessible-emojis\";\r\nimport type { Options } from \"@jsdevtools/rehype-url-inspector\";\r\nimport rehypeUrlInspector from \"@jsdevtools/rehype-url-inspector\";\r\nimport path from \"path\";\r\n\r\nconst Post = defineDocumentType(() => ({\r\n  name: `Post`,\r\n  filePathPattern: `content/blog/**/*.mdx`,\r\n  contentType: `mdx`,\r\n  fields: {\r\n    title: {\r\n      type: `string`,\r\n      description: `The title of the post`,\r\n      required: true\r\n    },\r\n    date: {\r\n      type: `date`,\r\n      description: `The date of the post`,\r\n      required: true\r\n    }\r\n  },\r\n  computedFields: {\r\n    url: {\r\n      type: `string`,\r\n      resolve: (doc): string =>\r\n        `/posts/${doc._raw.sourceFileName.replace(`.mdx`, ``)}`\r\n    },\r\n    contentRoot: {\r\n      type: `string`,\r\n      resolve: (doc): string => doc._raw.sourceFileDir\r\n    }\r\n  }\r\n}));\r\n\r\n// eslint-disable-next-line import/no-default-export\r\nexport default makeSource({\r\n  contentDirPath: `public`,\r\n  documentTypes: [Post],\r\n  mdx: {\r\n    remarkPlugins: [remarkGfm],\r\n    rehypePlugins: [\r\n      rehypeSlug,\r\n      rehypeAutolinkHeadings,\r\n      rehypeAccessibleEmojis,\r\n      [\r\n        rehypeUrlInspector,\r\n        {\r\n          inspectEach(url) {\r\n            const src = `/${path.join(\r\n              (url.file.data as { rawDocumentData: RawDocumentData })\r\n                .rawDocumentData.sourceFileDir,\r\n              url.url\r\n            )}`.replace(new RegExp(`\\\\`, \"g\"), `/`);\r\n            console.log(src);\r\n            console.log((url.node.properties.src = src));\r\n          },\r\n          selectors: [`img[src]`]\r\n        } as Options\r\n      ],\r\n      // @ts-ignore\r\n      [rehypeImgSize, { dir: \"public\" }]\r\n    ]\r\n  }\r\n});\r\n"],
  "mappings": ";AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA,IAAM,OAAO,mBAAmB,MAAO;AAAA,EACrC,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACN,OAAO;AAAA,MACL,MAAM;AAAA,MACN,aAAa;AAAA,MACb,UAAU;AAAA,IACZ;AAAA,IACA,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,aAAa;AAAA,MACb,UAAU;AAAA,IACZ;AAAA,EACF;AAAA,EACA,gBAAgB;AAAA,IACd,KAAK;AAAA,MACH,MAAM;AAAA,MACN,SAAS,CAAC,QACR,UAAU,IAAI,KAAK,eAAe,QAAQ,QAAQ,EAAE;AAAA,IACxD;AAAA,IACA,aAAa;AAAA,MACX,MAAM;AAAA,MACN,SAAS,CAAC,QAAgB,IAAI,KAAK;AAAA,IACrC;AAAA,EACF;AACF,EAAE;AAGF,IAAO,8BAAQ,WAAW;AAAA,EACxB,gBAAgB;AAAA,EAChB,eAAe,CAAC,IAAI;AAAA,EACpB,KAAK;AAAA,IACH,eAAe,CAAC,SAAS;AAAA,IACzB,eAAe;AAAA,MACb;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,QACE;AAAA,QACA;AAAA,UACE,YAAY,KAAK;AACf,kBAAM,MAAM,IAAI,KAAK,KAClB,IAAI,KAAK,KACP,gBAAgB,eACnB,IAAI,GACN,IAAI,QAAQ,IAAI,OAAO,MAAM,GAAG,GAAG,GAAG;AACtC,oBAAQ,IAAI,GAAG;AACf,oBAAQ,IAAK,IAAI,KAAK,WAAW,MAAM,GAAI;AAAA,UAC7C;AAAA,UACA,WAAW,CAAC,UAAU;AAAA,QACxB;AAAA,MACF;AAAA,MAEA,CAAC,eAAe,EAAE,KAAK,SAAS,CAAC;AAAA,IACnC;AAAA,EACF;AACF,CAAC;",
  "names": []
}
